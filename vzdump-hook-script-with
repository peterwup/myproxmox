#!/bin/bash
# Script to start/ stop backup server
# 
# nano /usr/local/bin/vzdump-hook-script
#
# based on the script of dremeier and Kochi1316
# https://forum.proxmox.com/threads/proxmox-backup-server-pbs-automatisch-via-wol-starten-und-stoppen.127266/
# 
# the used program etherwake was not installed on my PVE: apt install etherwake
#
# by AME 05/2023
#    PH  05/2024
#----------------------- Variablen --------------------------------------------------------------------------------#
# SET-X damit die Ausfuehrung protokolliert wird
set -x
#

# Data for QNAS  / this NAS is very slow. It need minimum 5 minutes after WOL till it is available and 4 minutes after power down till it is not longer reachable
#mac="00:08:9B:CC:DD:02"                                         # MAC Adresse  of the backup server
#host="192.168.0.23"                                             # Hostname oder IP of the backup server
#remoteuser="admin"                                              # username @ host / for qnap = admin
#sleep_after_wakeup=8m                                           # Sleep time after a Wake On LAN which is typically needed. You have to check for your devide
#sleep_after_powerdown=5m                                        # Sleep time after a shut down which is typically needed you have to check for your device


# data for openmediavault NAS
mac="4C:52:62:1D:0E:DE"
host="192.168.100.240"
remoteuser="root"                                               # username @ host / for qnap = admin
sleep_after_wakeup=1m                                           # Sleep time after a Wake On LAN which is typically needed. You have to check for your devide
sleep_after_powerdown=1m                                        # Sleep time after a shut down which is typically needed you have to check for your device

# general data 
nic=enp2s0                                                      # network interface for WOL
TimeoutTimes=120                                                # time out time in [s] for different things
storeid=backup                                                  # Identifier of the storage which shall be used for the backup
storagetype=cifs                                                # type of the storage "dir" or "cifs" ... 
proxmox_config_backup=/root/prox_config_backup.sh               # make a backup pf the proxmox configuration

#----------------------- Subroutines ---------------------------------------------------------------------------#


##############################################################################
#
# Check if we can reach the server by ping 
# If this is the case the next check will be if the storage is available
# Returns:
#       2 = down = server is not reachable by ping
#       1 = inactive = server is reachable by ping but backup storage is not mounted
#       0 = active = server is up and storeg is mounted
is_server_up () {
    if ping -c 1 $host &> /dev/null; then      # send ping to the server and check if server is available
        echo "Backup server is available"
        # check if storage is up
        com=$(pvesm status --storage $storeid | tail -1); 
        [[ "$com" =~ ($storeid+ +)($storagetype+ +)(active|disabled) ]];
        if [ "${BASH_REMATCH[3]}" == "active" ]; then  
            # server is up and storage is active
            return 0
        else
            # server is up, but starage is not available
            return 1
        fi
    else
        # server is down and storage is not available
        return 2
    fi
}

######################################################################
#
######################################################################
bring_server_down () {
    
    pvesm set $storeid --disable 1                                   # deaktiviere den Speicher
    ssh $remoteuser@$host -p 22 /sbin/poweroff < /dev/null &         # Backupserver wird heruntergefahren
    sleep $sleep_after_powerdown                                     # give the server the time to stop

    start_timemeasuring=$(date +%s) 
    until [[ "$xact" == "true" ]]; do     
      if ping -c 1 $host &> /dev/null; then      
        # server still up
        echo "server still up"
      else
        xact=true
        return 0                                              
      fi
      
      runtime=$(($(date +%s)-start_timemeasuring))
      if [ $runtime -gt $TimeoutTimes ]; then 
        echo "Fehler: Der Backup-Server konnte nicht heruntegefahren werden."
        return 1
      fi    
      sleep 10s
    done    
}

#----------------------- Main program  ---------------------------------------------------------------------------#

hook_state=$1                                                   # parameter with the current state in which the script is called
    
# ----------------------- #
# Job-Init
# ----------------------- #
if [ $hook_state == "job-init" ]; then                                # wenn ein Backup-Job rein kommt dann
    # check if the server is up
    is_server_up
    if [[ "$?" != 0 ]]; then
        # server is not up or backup storage is not connected
        # start the server by WOL
        /usr/sbin/etherwake -i $nic $mac  
        # wait till the server will be up, for my qnas it needs 8 minutes
        sleep $sleep_after_wakeup
        # enable the storage, as the server shall be up here
        pvesm set $storeid --disable 0
        # timestamp at the begin of the loop for checking timeout time
        start_timemeasuring=$(date +%s)                       # timestamp at the start of the procedure which shall bring the server up
        until [[ "$act" == "true" ]]; do       
            # loop to bring the server up
            # check if server is up and storage is available
            is_server_up
            if [ "$?" == 0 ]; then
                echo "Backup-Server ist jetzt erreichbar"
                # set "act" to TRUE to leave the loop later
                act=true
                exit 0
            fi            
            # calculate the run time we have between starting the loop and now
            runtime=$(($(date +%s)-start_timemeasuring))
            if [ $runtime -gt $TimeoutTimes ]; then                       # wenn der Server nach serverTimeout sec. nicht erreichbar ist exit 1 e>
                echo "ERROR Backup-Server ist nicht erreichbar"
                sleep 1s
                pvesm set $storeid --disable 1 
                exit 1
            fi
            # do not loop so often, wait 10s here
            sleep 10s   
        done
        # if we are here, ther server shall be up and the storage connected
    else
        # server is up and storage is connected
        echo "Der Backupserver l채uft bereits"
        exit 0
    fi
fi

# ----------------------- #
# Job-End
# ----------------------- #

if [ $hook_state == "job-end" ]; then                                      # Wenn der Backup-Job erledigt ist
    echo start backup of proxmox config
    $proxmox_config_backup
    
    echo "Backup erledigt, 체berpr체fe auf laufende Tasks"
    
    while true; do
        other_backups=$(( $(ps auxww | grep 'task.*vzdump' | grep -v grep | wc -l) -1 ))

        if [ $other_backups -lt 0 ]; then
            other_backups=0
        fi

        if [ $other_backups -ge 1 ]; then                       # sind unter den Tasks noch andere Backupjobs, beende das Skript

            if [ $other_backups -gt 1 ]; then

                echo "Es laufen noch $other_backups Backup-Jobs. Beende den aktuellen Job."
            else
                echo "Es l채uft noch $other_backups Backup-Job. Beende den aktuellen Job."
            fi
            exit 0
        fi


        echo "Keine laufenden Tasks gefunden. Warte 20 Sekunden, dann wird der Backup-Server gestoppt."
        sleep 20s
        bring_server_down
        if [[ "$?" != 0 ]]; then
          echo "Fehler: Der Backup-Server konnte nicht heruntergefahren werden."
          exit 1                                              # gibt`s einen Fehler im Log
        else
          echo "Der Backup-Server wurde erfolgreich heruntergefahren."
            exit 0
        fi                    
    done
fi    
# ----------------------- #

exit 0
