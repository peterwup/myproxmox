#!/bin/bash
# nano /usr/local/bin/vzdump-hook-script
# script um den Backupserver zu starten wenn ein Backup ansteht. Danach wieder Ausschalten
# dieses Hook-Skript (nano /usr/local/bin/vzdump-hook-script)  zum Backup-Auftrag hinzufügen: nano /etc/pve/jobs.cfg
# by AME 05/2023
#    PH 06.05.2024
#----------------------- Variablen --------------------------------------------------------------------------------#

PATH=/usr/sbin:${PATH}
# set -x                                                         # SET-X damit die Ausfuehrung protokolliert wird
storeid=backup                                                  # Variable - um welches Storage handelt es sich
mac="00:08:9B:CC:DD:02"                                         # MAC Adresse des PBS-Servers
host="192.168.0.23"                                             # Hostname oder IP des PBS-Servers
remoteuser="admin"                                              # username @ host / for qnap = admin
nic=enp2s0                                                      # Netzwerk-Karte über die WOL läuft
serverTimeout=300                                               # maximum time till we assume that the server will not respond in seconds
storagetype=cifs                                                # type of the storage "dir" or "cifs" ... 
sleep_after_wakeup=8m                                           # Zeit die nach dem wakeup des servers gewartet wird bevor es weiter gehen soll
sleep_after_powerdown=5m                                        # Zeit die nach dem power down gewartet werden muß bis das NAS wirklich unten ist
serverDownTimeout=120                                           # max. time we wait after sleep_after_powerdown for the server
                                                                       
hook_state=$1                                                   # parameter with the current state in which the script is called

#---------------------- Funktionen --------------------------------------------------------------------------------#

#####################################################################
# Funktion um die vergangene Zeit in Sekunden auf das format hh:mm:ss
#
# Parameter
#    $1 = Zeit in Sekunden
#
#####################################################################
format_time() {                                                 # Funktion zur Umrechnung der vergangenen Zeit in ein gängiges Format: hh:mm:ss
    local input_seconds=$1
    local hours=$((input_seconds / 3600))
    local minutes=$(( (input_seconds % 3600) / 60 ))
    local seconds=$((input_seconds % 60))

    printf "%02d:%02d:%02d" "$hours" "$minutes" "$seconds"
}

######################################################################
# Check if we can reach the server by ping and if the backup storage is mounted
# Returns:
#               2 = down = server is not reachable by ping
#       1 = inactive = server is reachable by ping but backup storage is not mounted
#       0 = active = server is up and storeg is mounted
######################################################################
is_server_up () {
    # cheks if the server is reachable and if the backup storage is mounted
        if ping -c 1 $host &> /dev/null; then                           # prüfe, ob der Backup-Server schon läuft
        echo "Der Backupserver läuft bereits"
                com=$(pvesm status --storage $storeid | tail -1);
        [[ "$com" =~ ($storeid+ +)($storagetype+ +)(active|disabled) ]];
                if [ "${BASH_REMATCH[3]}" == "active" ]; then  
                  return 0
                else
                  return 1
                fi
    else
                return 2
        fi
}

######################################################################
#
######################################################################
bring_server_down () {
    
    pvesm set $storeid --disable 1                                   # deaktiviere den Speicher
    ssh $remoteuser@$host -p 22 /sbin/poweroff < /dev/null &         # Backupserver wird heruntergefahren
    sleep $sleep_after_powerdown                                     # give the server the time to stop

    timeout_server_down_start=`date +%s` 
    until [[ "$xact" == "true" ]]; do     
      if ping -c 1 $host &> /dev/null; then      
        # server still online
        xact=false
      else
        xact=true
        return 0                                              
      fi
      
      timeout_server_down_end=`date +%s`
      runtime=$((timeout_server_down_end-timeout_server_down_start))
      if (( runtime > serverDownTimeout )); then
        echo "Fehler: Der Backup-Server konnte nicht heruntegefahren werden."
        return 1
      fi    
      sleep 10s
    done    
}

#----------------------- Programmablauf ---------------------------------------------------------------------------#

# just to see the parameter used to call this script
# echo "hookscript: $@ "

# ----------------------- #
# Job-Init
# ----------------------- #
if [ $hook_state == "job-init" ]; then                                # wenn ein Backup-Job rein kommt dann
    # check if the server is up
    is_server_up
    if [[ "$?" != 0 ]]; then
        # server is not up or backup storage is not connected
        # start the server by WOL
        /usr/sbin/etherwake -i $nic $mac  
        # wait till the server will be up, for my qnas it needs 8 minutes
        sleep $sleep_after_wakeup
        # enable the storage, as the server shall be up here
        pvesm set $storeid --disable 0
        # timestamp at the begin of the loop for checking timeout time
        timeout_wakeup_start=`date +%s`                         # timestamp at the start of the procedure which shall bring the server up
        until [[ "$act" == "true" ]]; do       
            # loop to bring the server up
            # check if server is up and storage is available
            is_server_up
            if [ "$?" == 0 ]; then
                echo "Backup-Server ist jetzt erreichbar"
                # set "act" to TRUE to leave the loop later
                act=true
                exit 0
            fi
            # timestamp in seconds
            timeout_wakeup_end=`date +%s`
            # calculate the run time we have between starting the loop and now
            runtime=$((timeout_wakeup_end-timeout_wakeup_start))
            if (( runtime > serverTimeout )); then                     # wenn der Server nach serverTimeout sec. nicht erreichbar ist exit 1 e>
                echo "ERROR Backup-Server ist nicht erreichbar"
                sleep 1s
                pvesm set $storeid --disable 1 
                exit 1
            fi
            # do not loop so often, wait 10s here
            sleep 10s   
        done
        # if we are here, ther server shall be up and the storage connected
    else
        # server is up and storage is connected
        echo "Der Backupserver läuft bereits"
        exit 0
    fi
fi

# ----------------------- #
# Job-End
# ----------------------- #

if [ $hook_state == "job-end" ]; then                                      # Wenn der Backup-Job erledigt ist
    echo "Backup erledigt, überprüfe auf laufende Tasks"
    
    while true; do
        other_backups=$(( $(ps auxww | grep 'task.*vzdump' | grep -v grep | wc -l) -1 ))

        if [ $other_backups -lt 0 ]; then
            $other_backups=0
        fi

        if [ $other_backups -ge 1 ]; then                       # sind unter den Tasks noch andere Backupjobs, beende das Skript

            if [ $other_backups -gt 1 ]; then

                echo "Es laufen noch $other_backups Backup-Jobs. Beende den aktuellen Job."
            else
                echo "Es läuft noch $other_backups Backup-Job. Beende den aktuellen Job."
            fi
            exit 0
        fi


        echo "Keine laufenden Tasks gefunden. Warte 20 Sekunden, dann wird der Backup-Server gestoppt."
        sleep 20s
        bring_server_down
        if [[ "$?" != 0 ]]; then
          echo "Fehler: Der Backup-Server konnte nicht heruntergefahren werden."
          exit 1                                              # gibt`s einen Fehler im Log
        else
          echo "Der Backup-Server wurde erfolgreich heruntergefahren."
            exit 0
        fi                    
    done
fi    
# ----------------------- #

exit 0
